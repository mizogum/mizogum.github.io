{"version":3,"sources":["salinity/form.js","salinity/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","initState","handleChange","React","useState","state","setState","onChange","e","useInputs","weight","salinity","salt","seasoning_salinity","seasoning","event","newState","target","name","value","type","Salinity","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAkDeA,EAxCF,WACX,IADiB,EARD,SAACC,EAAWC,GAAkB,IAAD,EACnBC,IAAMC,SAASH,GADI,mBACtCI,EADsC,KAC/BC,EAD+B,KAE7C,MAAO,CACLD,QACAE,SAAU,SAACC,GAAD,OAAOF,EAASJ,EAAaG,EAAOG,MAmBpBC,CAdV,CAChBC,OAAQ,EACRC,SAAU,GACVC,KAAM,EACNC,mBAAoB,GACpBC,UAAW,IAEQ,SAACT,EAAOU,GAC3B,IAAMC,EAAQ,2BAAQX,GAAR,kBAAgBU,EAAME,OAAOC,KAAOH,EAAME,OAAOE,QAG/D,OAFAH,EAASJ,KAAOI,EAASN,OAASM,EAASL,SAAW,IACtDK,EAASF,UAAYE,EAASJ,KAAOI,EAASH,mBAAqB,IAC5DG,KAGDX,EAfS,EAeTA,MAAOE,EAfE,EAeFA,SAEf,OAAO,gCACL,8BACE,2CACS,uBAAOa,KAAK,OAAOF,KAAK,SAASC,MAAOd,EAAMK,OAAQH,SAAUA,OAEzE,6CACW,uBAAOa,KAAK,OAAOF,KAAK,WAAWC,MAAOd,EAAMM,SAAUJ,SAAUA,IAD/E,OAGA,0CACSF,EAAMO,KADf,WAIF,8BACE,uDACqB,uBAAOQ,KAAK,OAAOF,KAAK,qBAAqBC,MAAOd,EAAMQ,mBAAoBN,SAAUA,IAD7G,QAGA,4CACWF,EAAMS,UADjB,eCzCAO,EAAW,kBACf,2CACE,cAAC,EAAD,Q,MCYWC,MAbf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,sCACO,8CADP,4BAIF,cAAC,EAAD,QCCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ffa47b95.chunk.js","sourcesContent":["import React from 'react';\n\nconst useInputs = (initState, handleChange) => {\n  const [state, setState] = React.useState(initState);\n  return {\n    state,\n    onChange: (e) => setState(handleChange(state, e))\n  };\n};\n\nconst Form = () => {\n  const initState = {\n    weight: 0,\n    salinity: 0.6,\n    salt: 0,\n    seasoning_salinity: 15,\n    seasoning: 0\n  }\n  const handleChange = (state, event) => {\n    const newState = { ...state, [event.target.name]: event.target.value };\n    newState.salt = newState.weight * newState.salinity / 100;\n    newState.seasoning = newState.salt / newState.seasoning_salinity * 100;\n    return newState;\n  };\n\n  const { state, onChange } = useInputs(initState, handleChange);\n\n  return <div>\n    <p>\n      <span>\n        Weight:<input type='text' name='weight' value={state.weight} onChange={onChange} />\n      </span>\n      <span>\n        salinity:<input type='text' name='salinity' value={state.salinity} onChange={onChange} />%\n      </span>\n      <span>\n        salt: {state.salt} g\n      </span>\n    </p>\n    <p>\n      <span>\n        Seasoning salinity:<input type='text' name='seasoning_salinity' value={state.seasoning_salinity} onChange={onChange} /> %\n      </span>\n      <span>\n        amount: {state.seasoning} g\n      </span>\n    </p>\n  </div>\n}\n\nexport default Form;\n","import Form from './form';\n\nconst Salinity = () =>\n  <div>salinity\n    <Form />\n  </div>\n\nexport {\n  Salinity\n}\n","import { Salinity } from './salinity';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n      </header>\n      <Salinity />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}